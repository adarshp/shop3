# -*- mode:org; -*-

* Intro
Design for explicit stack reformulation of the SHOP2 search engine.
* Top level decomposition
** Seek plans (=SEEK-PLANS=)
   [[file:planning-engine/search.lisp::(defmethod%20seek-plans%20((domain%20domain)%20state%20tasks%20top-tasks%20partial-plan%20partial-plan-cost][SEEK-PLANS source]]
- If no tasks, invoke =SEEK-PLANS-NULL=
- If immediate tasks, choose 1 and =SEEK-PLANS-TASK=
- Else we pick a top-task and try to solve it
** =SEEK-PLANS-TASK=
[[file:planning-engine/search.lisp::(defmethod%20seek-plans-task%20(domain%20task1%20state%20tasks%20top-tasks%20partial-plan][SEEK-PLANS-TASK source]]
Simply dispatch to either =SEEK-PLANS-NONPRIMITIVE= or =SEEK-PLANS-PRIMITIVE=.
** =SEEK-PLANS-PRIMITIVE=
- Dispatch to either
  - =APPLY-OPERATOR= or
  - =APPLY-ACTION=
- Recursive call to =SEEK-PLANS=
- On failure (return from recursive call), undo the effects of the primitive.
** =SEEK-PLANS-NONPRIMITIVE=
- Iterate over the set of method definitions
- For each method definition, call =APPLY-METHOD= and, if the method
  application succeeds, invoke =SEEK-PLANS= recursively.
** =SEEK-PLANS-NULL=
Check the plan to see if it meets conditions like which plan are we looking for,
cost acceptable, etc.  If so, use =STORE-PLAN!= (and possible also
=DUMP-PREVIOUS-PLANS!=).  Then return.
** =APPLY-OPERATOR=
- standardize the operator (should this be done one time only?)
- unify with the body
- check the preconditions
- apply the additions and deletions (vast majority of the function does this).
** =APPLY-ACTION= (PDDL actions)
Really, essentially the same as =APPLY-OPERATOR=, but with a few changes because
of the different scoping (preconditions not scoped over effects).
* Search state components:
  [[file:planning-engine/explicit-search.lisp::(defclass%20search-state%20()][SEARCH-STATE]]
- State (world state)
- Tasks
- Top tasks
- Partial plan
- Cost so far
- Depth
- Protections
- Unifier
- Subtask parents table
- Backtrack stack
- Alternatives -- what are the alternatives for the current choice?
*Note:* in CIRCA, the state of the search has a set of alternatives explicitly
 stored.  But in SHOP2, the alternatives are implicit in the set of tasks and
 top-tasks.  Is that sufficient, though?  If we are going to explore these
 alternatives in a way that is more general than left-to-right, do we need to
 explicitly track the alternatives so that, for example, we can choose the top
 tasks is a different order?
* Proposed algorithm
#+BEGIN_SRC common-lisp
  (defun search (state)
    (iter while t
      (if (empty state)
             ;; because we are doing HTN Planning, if there are no tasks, we have a plan.
             (cond ((check-for-done state settings)
                    state) ;extract plan from this
                   (t (search (backtrack state))))
          (multiple-value-bind (task new-state)
              (cond ((immediate-tasks state)
                     (choose-immediate-task state))
                    (t
                     (choose-toplevel-task state)))
            (search new-state)))))

  ;;; this is ALMOST right, but not right because it doesn't tell what happens when we backtrack.
  ;;; that's why CIRCA has the notion of MODE, so that you can know how to move forward.
  (defun choose-immediate-task (state)
    ;; COPY-STATE could/should be destructive...
    (let* ((new-state (copy-state state))
           (immediate-tasks (immediate-tasks (get-immediate-list (top-tasks new-state))))
           (chosen (choose-immediate-task immediate-tasks unifier))
           ;; check to make sure this can really be done...
           (alternatives (remove chosen immediate-tasks)))
      ;; record the new alternatives
      (bt-checkpoint new-state)
      (bt-alternatives new-state alternatives)
      (values chosen new-state)))



  (defun expand-task (state task)
    (let ((new-state
            (cond ((primitive-task-p task)
                   (let (op (operator *domain* task-name)))
                     (etypecase op
                       (operator
                        (state-apply-operator state task))
                       (pddl-action
                        (state-apply-action state task))))
                  (t
                   (state-apply-non-primitive state task)))))
      new-state))

  (defun backtrack (state &optional until)
    "Simple chronological backtracking if UNTIL is NIL, else
  backjump to the point named by UNTIL. Return new STATE
  object."
    (iter (for entry = (pop (backtrack-stack state)))
       (unless entry
         (error "Stack empty on backtrack."))
       (bt-undo entry state) ;; undoes effects recorded in ENTRY...
       (when (bt-match entry until) ;; check to see if we are done backtracking
          (return state))))



#+END_SRC

* Alternative design
We could adopt the "virtual machine" model that CIRCA uses.  In this case, we
could have the following "registers:"
- Search state
- Backtrack stack
- Domain
** Top-level outline
#+BEGIN_SRC common-lisp
  (defun search (state)
      (iter (while t)
        (ecase (mode state)
          (check-for-done
           (if (empty state)
               ;; because we are doing HTN Planning, if there are no tasks, we have a plan.
               (cond ((check-for-done state settings)
                      (setf (mode state) 'extract-plan))
                     (t (backtrack state))))
               (setf (mode state) 'pop-immediate-task))
          (pop-immediate-task
           (cond ((immediate-tasks state)
                  (setf state (choose-immediate-task state))
                  (setf (mode state) 'expand-task))
                 (t
                  (setf (mode state) 'pop-toplevel-task))))
          (pop-toplevel-task
           (setf state (choose-toplevel-task state))
           (setf (mode state) 'expand-task))
          (expand-task
           (let ((task (current-task state)))
             (if (primitivep task)
                 (setf (mode state) 'expand-primitive-task)
                 (setf (mode state) 'expand-nonprimitive-task))))
          (expand-primitive-task
           (multiple-value-bind (success new-state)
               (expand-primitive-state state)
             ;; maybe this should just be side-effecting...
             (setf state new-state)
             (if success
                 (setf (mode state) 'check-for-done)
                 (backtrack state))))
          (expand-nonprimitive-task
           (multiple-value-bind (success new-state)
               (choose-method-state state)
             ;; maybe this should just be side-effecting...
             (setf state new-state)
             (if success
                 (setf (mode state) 'choose-bindings-method)
                 (backtrack state))))
          (choose-bindings-method
           (multiple-value-bind (success new-state)
               (choose-method-bindings-state state)
             ;; maybe this should just be side-effecting...
             (setf state new-state)
             (if success
                 (setf (mode state) 'check-for-done)
                 (backtrack state))))
          (extract-plan
           ;; stuff here
           (check-plans-found)
           ))))
#+END_SRC
